# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# edges2point.py
# Created on: 2016-11-17 12:36:28.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy, os
import numpy as np

arcpy.env.overwriteOutput = True
# Local variables:
rutapro = r'H:\VDCNS\protocolo\pro'
dtm_mtn_318_img = r'H:\VDCNS\Curvas_MTN_Historico\\dtm_mtn_318.img'

for i in os.listdir(rutapro):

	if os.path.isdir(os.path.join(rutapro, i)):
		print i

		escena = os.path.join(rutapro, i)
		for r in os.listdir(escena):
			
			if r.endswith('edges.img'):
				print r

				try:

					edges = os.path.join(escena, r)
					Extract = os.path.join(escena, r[:8] + '_exct')
					Point_values = os.path.join(escena, r[:8] + '_points.shp')

					# Process: Extract by Mask
					arcpy.gp.ExtractByMask_sa(dtm_mtn_318_img, edges, Extract)

					arr = arcpy.RasterToNumPyArray(Extract)
					array = arr[arr > 0]
					median = np.median(array)
					print 'MEDIAN:', median, 'MEAN:', array.mean()

					# Process: Raster to Point
					arcpy.RasterToPoint_conversion(edges, Point_values, "Value")

					arcpy.AddField_management(Point_values, "cota", "DOUBLE", 5, 2)



					with arcpy.da.UpdateCursor(Point_values, "*") as cursor:
						# For each row, evaluate the WELL_YIELD value (index position 
						# of 0), and update WELL_CLASS (index position of 1)
						for row in cursor:
							if row[4] == 0:
								row[4] = float(array.mean())
							cursor.updateRow(row)

				except Exception as e:
					print e
					continue